// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Asteroid {
  id        String @id @default(uuid())
  position  Json
  resources Json
}

model Ship {
  id      String  @id @default(uuid())
  name    String
  class   String
  modules Json
  fleetId String?
}

enum TaskType {
  COLLECT_ASTEROIDS
  RESEARCH
  CONSTRUCT_SHIP
  CONSTRUCT_BUILDING
  COLLECT_RESOURCES
  CONSTRUCT_MODULE
  FLYING_FLEET
  ASSEMBLE_FLEET
  BUILD_SHIP
  UPGRADE_RESOURCE
}

model Task {
  id        String   @id @default(uuid())
  type      TaskType
  endDate   String
  details   Json
  createdAt DateTime @default(now())
  userId    String
}

model Fleet {
  id       String   @id @default(uuid())
  name     String
  userId   String?
  shipIds  String[]
  position Json
  cargo    Json
}

model Pirate {
  id       String @id @default(uuid())
  name     String
  level    Int
  position Json
}

model Planet {
  id                  String  @id @default(uuid())
  name                String
  type                String
  position            Json
  userId              String?
  resources           Json
  lastSync            String?
  resourcesMultiplier Json
  mines               Json    @default("{}")
  user                User?   @relation(fields: [userId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  name          String?
  email     String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  research  String[] @default([])
  Planets    Planet[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}